import 'package:ext_rw/ext_rw.dart';
import 'package:flowers_admin/src/infrostructure/schames/scheme.dart';
import 'package:flowers_admin/src/infrostructure/schames/scheme_entry.dart';
import 'package:flowers_admin/src/presentation/home_page/widgets/table_widgets.dart';
import 'package:flutter/material.dart';
import 'package:hmi_core/hmi_core_log.dart';
import 'package:hmi_core/hmi_core_result.dart';

class TableProduct extends StatefulWidget {
  final Scheme _scheme;
  const TableProduct({
    super.key,
    required Scheme scheme,
  }) :
    _scheme = scheme;
  //
  //
  @override
  // ignore: no_logic_in_create_state
  State<TableProduct> createState() => _HomeBodyState(
    scheme: _scheme,
  );
}

class _HomeBodyState extends State<TableProduct> {
  final _log = Log("$_HomeBodyState._");
  final Scheme _scheme;
  ///
  ///
  _HomeBodyState({
    required Scheme scheme,
  }) :
    _scheme = scheme;
  //
  //
  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Result<ApiReply>>(
      future: _scheme.fetch([]),
      builder: (BuildContext context, AsyncSnapshot<Result<ApiReply>> snapshot) {
        _log.debug("build | snapshot: $snapshot");
        final textStile = Theme.of(context).textTheme.bodyMedium;
        final result = snapshot.data;
        if (result != null) {
          if (result.hasData) {
            final apiReply = result.data;
            if (!apiReply.hasError) {
              final count = apiReply.data.length;
              final rows = apiReply.data;
              return Table(
                defaultVerticalAlignment: TableCellVerticalAlignment.middle,
                border: TableBorder.all(),
                columnWidths: { for (var i in [for (var i = 0; i <= 14; i++) i]) i : const IntrinsicColumnWidth() },
                // {
                //   0: IntrinsicColumnWidth(),
                //   1: FlexColumnWidth(),
                // },
                children: _buildClientRows(rows),
              );
            } else {
              return Center(child: Text("API Error: ${apiReply.error.message}", style: textStile,));
            }
          } else {
            return Center(child: Text("Error: ${result.error}", style: textStile,));
          }
        }
        return Center(child: Text("No customers received", style: textStile,));
      },
    );
  }
  ///
  ///
  List<TableRow> _buildClientRows(List<String> keys, List<SchemeEntry> entries) {
    final textStile = Theme.of(context).textTheme.bodyMedium;
    return entries.map((entry) {
      return TableRow(
        children: _buildClientRow(keys, entry, textStile),
      );
    }).toList();
  }
  ///
  ///
  List<TCell> _buildClientRow(List<String> keys, SchemeEntry entry, textStyle) {
    final cells = keys.map((key) {
      final value = entry.value(key);
      return TCell(
        // key: Key(entry.key),
        value: value,
        style: textStyle,
        onComplete: (value) {
          entry.update(key, value);
          _scheme.update(entry).then((result) {
            if (result.hasError) {
              showDialog(
                  context: context,
                  builder: (_) => AlertDialog(
                      title: Text('Update error'),
                      content: Text('error: ${result.error}'),
                  )
              );          
            }
          });
        },
      );
    }).toList();
    return cells;
  }
}
